== Login / Invite Flow

Logo is in a yellow font

Tuneful is currently invite only. When you come to Tuneful, you are faced with a logo in the upper left, a link to be notified when new invites are ready, a form to login, and a link to more info. This will all live at /login. It will all be ajax; when you submit an email, an email will be sent to me, and also added to the interested_parties table. Login will be handled via ajax as well. More info will load a new page in a lightbox on top.

When a user logs in, a yellow notification along the top may inform them they have invitations to give out. These will also appear in the upper right section (where you would expect login to be). Clicking this will launch a pop up, allowing them to specify up to five email addresses to invite.

A user will receive a nicely formatted email in their inbox upon being invited. What happens is a new user is created on the backend, with no username or password, and a unique hash. The register link will look like /register/239fjs9djsbruehfiejhdha. When /register is hit, rails will look for this invite_code, and if not found will display an error message; if found, it will display the register form.



== The static elements

When a user first logs in, there are a number of static elements. The logo sits on the top left and is always visible. To the right of that is the radio box; this is detailed below. To the right of that are a logout link and any invites the user has.

Below this top banner is an occasional yellow bar used to display any notifications to the user. This bar will be animated, a slide down effect, upon show, and will have an (x) to the left so that it can be closed easily.

Along the bottom of the page is a contact link, and an about link. These launch lightboxes containing the relevant info.



== The homepage

On the homepage are two main elements: a search section and a list of radio cards. The search section prompts you to type in a favorite artist or station, with suggestions that appear below, similar to AOS. Upon hitting search a list of stations will appear containing that artist, along with a message saying that you are currently not allowed to create your own station. Eventually, if you use Pandora, you can suck in a station from that, or import Last.fm settings or something, or generate it off an iTunes playlist.

The list of radio cards correspond to stations you can choose from. Upon your initial arrival stations are random; when you search stations will appear in the relevant order, so long as they include at least one song from the artist you chose (or the artist of the track you chose). Hovering over a card will show the option to play, play and keep browsing, or to 'investigate' (better word please) the station. Playing means subscribe; eventually you can 'listen anonymously' but not now. The play option is a large triangle overlay; the second two options are along the bottom, much smaller. Playing will update the currently playing station in the radio, investigate will take you to the station.

Should stations be images, like how I have it now? Or should they be the album covers of the songs they contain? Perhaps they can be either, depending on whether on creation you specify an image or not.

There is a sidebar on this page containing most popular stations and recently added stations. Possibly most high-voted users, as well.



== The radio

The radio, in addition to playing the current track and displaying relevant info about that track, must accommodate the following actions:

- Comment on playing song
- Vote up / vote down
- Add song
- Eventually a chat room

It must also allow the ability to 'scan', or listen to snippets from random stations, like the scanning in a regular radio.

Proposed layout:

Station image on the top left, station title to the top right

Track image on left | Track info: title, artist, album, total plays, popularity rating | Vote up / down | Current stats (current listeners, total tracks)

Bottom, left: Comment on playing song, this expands to fill the middle (not the image) could be like a speech bubble
Bottom, middle: Add a song to station
Bottom, right: Buy track

The radio can be 'popped out' into a new popout window. This will make the top banner smaller. This can also accommodate an AIR app.



== Station

A station will have the image in the top left, followed by the title, the number of subscribers, maybe the creation date. A button along the top allows a subscriber to add songs to a station. Along the right side are subscribers in the station, sorted by their popularity, and the tracks in the station, ranked by their popularity (displayed as words, not numbers - like 'Hot', 'Solid', 'Sucks'). It only shows a few but these can be expanded as necessary.

A station's main page is the feed; this shows recent activity. Users can comment on tracks, respond to comments, or comment on the station. It also tracks changes to tracks, so when a track changes from 'New' to 'Sucks' or 'Rocking' to 'Hot'.



== Playlist Generation

A station has a number of tracks, with a net rating. The net rating is calculated by taking the sum of positive and negative votes. This will result in a rating between -1 and 1. If a track's total number of ratings is less than the total number of subscribers in the station it belongs to, it is considered to be "in limbo". A track classified as such is added positive points equal to the total number of subscribers less the total number of votes; so a track in limbo that has 4 total votes, and a net score of 2 (3 positive, 1 negative) where a station has 20 subscribers, will end up with a net rating 18 (or 2 + 20 - 4). The total number of votes is important; a track that is consistently voted highly regardless of its negative votes should have higher weight than a track that has only positive ratings, but less of them overall. A track should have a limit of votes in order to exclude old votes; this limit should be the total number of subscribers * 24 * 30, or the maximum number of votes a track could get if it played every hour, voted on by every subscriber, for a month.

There are a few simple rules regarding stations. A track should not generally play more than once an hour, and so a station must have enough tracks so that the tracks' total duration is more than an hour. A playlist is generally considered to be at least 24 hours in length.

After the net rating calculation, when a playlist is constructed, a check is performed to delete from the station any tracks with a negative rating greater than the total number of subscribers in the station. So a station with 20 subscribers, that has a score of -21, is automatically deleted, assuming this does not reduce the duration of the station below an hour.

The median track duration (or should it be the average?) is calculated, and then weights are re-calculated. Let's assume the median track duration is 5 minutes. Shorter tracks should play more often; longer tracks less often. If a track is 60 minutes in length, it should only play once per playlist. Assuming all weights are equal, and there are 12 total tracks, 11 that have durations of 5 minutes and 1 that is 60 minutes, then the 60-minute track is determined to have a discrepancy of 55*60 or 3300, while every other track has a discrepancy of 0. If every track has equal weights - say 20 - ... well, I'm not sure yet.

Every track's rating is increased by 1 plus the lowest negative track's absolute value of its rating; so a playlist with a track having a rating of -15 will see all tracks increased by 16.

We must also weight the playlist to prevent any one song from dominating a playlist and thus playing more than once an hour. The equation for this is x = (highest_rating * plays_in_a_day / 24 ) - total number of votes. The 'x' value is then distributed equally amongst all tracks, thus diluting the top tracks relative value.

86400 is the total number of seconds in a day. When we divide by our median track duration of 5*60 or 300, we get 288, implying that we have 288 tracks to play in the playlist. We calculate percentages for each track by taking the total number of votes for all tracks in the playlist, then dividing a track's net rating by that total number. We then multiply each tracks percentage by the number of tracks in the playlist, rounding up, to determine how many times a track should play in the playlist.

Now each track has a number corresponding to the number of times it will appear in the playlist. We sort the array to be ascending, then iterate over the array to create a new array, inserting items as equally as possible. So for instance:
A - 2
B - 3
C - 5
D - 8
Will produce: AA, then BABAB, then CBCACBCACB, then DCBDCDADCBDCDADCBD
(ask for suggestions about this on stack)



== Tasks

- Set up key / store cloud database
- Design logo
- Set up login / invite flow
- Build admin screen, for me to specify who gets invites
- Design radio
- Build banner, footer
- Build notification functionality
- Set up models: track, artist, album, station, user, comments
- Seed with initial values for stations
- Set up auto-suggestions search box
- Set up cards
- Search for cards
- Fill out station
- and we have version 0.5 !
- Add a station functionality